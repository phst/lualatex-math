% Copyright 2011, 2012, 2013 Philipp Stephani
% Copyright 2015 Philipp Stephani and Joseph Wright
\input{regression-test}

% Since \pkg{mathtools} loads \pkg{amsmath} and \pkg{amsopn} anyway, we test
% all three in one file.

\START

\AUTHOR{Philipp Stephani and Joseph Wright}

\OMIT

\documentclass{minimal}

\usepackage{expl3}
\ExplSyntaxOn
\cs_new_protected:Npn \AssertDimEqual #1#2
  { \dim_compare:nNnTF {#1} = {#2} \TRUE \ERROR }
\cs_new_protected:Npn \AssertIntEqual #1#2
  { \int_compare:nNnTF {#1} = {#2} \TRUE \ERROR }
\cs_new_protected:Npn \AssertMathStyle
  { \AssertIntEqual \luatex_mathstyle:D }
\cs_new_protected:Npn \AssertCrampedStyle
  {
    \int_if_even:nTF \luatex_mathstyle:D \ERROR \FALSE }
  }
\cs_new_protected:Npn \AssertNoncrampedStyle
  {
    \int_if_even:nTF \luatex_mathstyle:D \TRUE \ERROR }
  }
\ExplSyntaxOff

\usepackage{lualatex-math}

% Needed until next kernel update
\directlua{tex.enableprimitives("",tex.extraprimitives("luatex"))}

% First a scratch box register.
\newsavebox{\testbox}
% We set the mathematical code for the minus sign to some arbitrary Unicode
% value to test whether the load-time patch works.
\Umathcode`\-="2 "33 "44444 \relax
\usepackage{amsmath}

\TIMO

\AssertIntEqual{\Umathcode`\-}{"33444444}
\makeatletter
\AssertIntEqual{\std@minus}{"33444444}
\makeatother

\OMIT

% Check that we can still declare operators.
\DeclareMathOperator{\Operator}{*-/'a-b}
\DeclareMathOperator*{\OperatorWithLimits}{01'*-/}
\DeclareMathOperator{\OperatorWithPunctuation}{a:b*/'-.}
\usepackage{mathtools}
% The same for the document begin hook.
\Umathcode`\="5 "66 "77777 \relax

\begin{document}

\TIMO

\AssertIntEqual{\Umathcode`\=}{"66A77777}
\makeatletter
\AssertIntEqual{\std@equal}{"66A77777}
\makeatother
% Here we test whether the strut box has the correct height and depth.
\sbox{\testbox}{$($} % )
\makeatletter
\AssertDimEqual{\ht\Mathstrutbox@}{\ht\testbox}
\AssertDimEqual{\dp\Mathstrutbox@}{\dp\testbox}
\makeatother
% Here we test for the various \pkg{amsmath} features that have to be patched:
% sub-arrays and various kind of fraction-like objects.  The \cmd{\substack}
% command and \env{subarray} environment aren’t really tested since it is hard
% to check whether the outcome looks right in an automated way.  All tests are
% done in both inline and display mode.
\begin{equation*}
  \AssertMathStyle{0} \sqrt{\AssertMathStyle{1}}
  \sum_{
    \substack{\frac12 \\ \frac34 \\ \frac56}
  }
  \sum_{
    \begin{subarray}{l} \frac12 \\ \frac34 \\ \frac56 \end{subarray}
  }
  \frac{\AssertMathStyle{2}}{\AssertMathStyle{3}}
  a^{\frac{\AssertMathStyle{6}}{\AssertMathStyle{7}}}
  \dfrac{\AssertMathStyle{2}}{\AssertMathStyle{3}}
  \tfrac{\AssertMathStyle{4}}{\AssertMathStyle{5}}
  \binom{\AssertMathStyle{2}}{\AssertMathStyle{3}}
  a^{\binom{\AssertMathStyle{6}}{\AssertMathStyle{7}}}
  \dbinom{\AssertMathStyle{2}}{\AssertMathStyle{3}}
  \tbinom{\AssertMathStyle{4}}{\AssertMathStyle{5}}
  \genfrac{}{}{}{}{\AssertMathStyle{2}}{\AssertMathStyle{3}}
  \genfrac{<}{/}{0pt}{0}{\AssertMathStyle{2}}{\AssertMathStyle{3}}
  \genfrac{}{}{}{1}{\AssertMathStyle{4}}{\AssertMathStyle{5}}
  \genfrac{|}{]}{4pt}{2}{\AssertMathStyle{6}}{\AssertMathStyle{7}}
  \genfrac{}{}{}{3}{\AssertMathStyle{6}}{\AssertMathStyle{7}}
\end{equation*}
\begin{math}
  \AssertMathStyle{2} \sqrt{\AssertMathStyle{3}}
  \sum_{
    \substack{\frac12 \\ \frac34 \\ \frac56}
  }
  \sum_{
    \begin{subarray}{l} \frac12 \\ \frac34 \\ \frac56 \end{subarray}
  }
  \frac{\AssertMathStyle{4}}{\AssertMathStyle{5}}
  a^{\frac{\AssertMathStyle{6}}{\AssertMathStyle{7}}}
  \dfrac{\AssertMathStyle{2}}{\AssertMathStyle{3}}
  \tfrac{\AssertMathStyle{4}}{\AssertMathStyle{5}}
  \binom{\AssertMathStyle{4}}{\AssertMathStyle{5}}
  a^{\binom{\AssertMathStyle{6}}{\AssertMathStyle{7}}}
  \dbinom{\AssertMathStyle{2}}{\AssertMathStyle{3}}
  \tbinom{\AssertMathStyle{4}}{\AssertMathStyle{5}}
  \genfrac{}{}{}{}{\AssertMathStyle{4}}{\AssertMathStyle{5}}
  \genfrac{<}{/}{0pt}{0}{\AssertMathStyle{2}}{\AssertMathStyle{3}}
  \genfrac{}{}{}{1}{\AssertMathStyle{4}}{\AssertMathStyle{5}}
  \genfrac{|}{]}{4pt}{2}{\AssertMathStyle{6}}{\AssertMathStyle{7}}
  \genfrac{}{}{}{3}{\AssertMathStyle{6}}{\AssertMathStyle{7}}
\end{math}
% Since \pkg{mathtools}’ \cmd{\cramped} command uses \cmd{\mathchoice}, we
% cannot test for a single mathematical style since all of them are executed;
% instead, we just verify that all styles encountered are cramped.
\begin{equation*}
  \AssertMathStyle{0}
  a^{\AssertMathStyle{4} a}
  \cramped{\AssertCrampedStyle a^{\AssertCrampedStyle a}}
  a^{
    \AssertMathStyle{4}
    a^a
    \cramped{\AssertCrampedStyle a^{\AssertCrampedStyle a}}
    a^a
    \AssertMathStyle{4}
  }
  a^{
    a^{
      \AssertMathStyle{6}
      a^a
      \cramped{\AssertCrampedStyle a^{\AssertCrampedStyle a}}
      a^a
      \AssertMathStyle{6}
    }
  }
  a^{\AssertMathStyle{4} a}
  \AssertMathStyle{0}
\end{equation*}
\begin{math}
  \AssertMathStyle{2}
  a^{\AssertMathStyle{4} a}
  \cramped{\AssertCrampedStyle a^{\AssertCrampedStyle a}}
  a^{
    \AssertMathStyle{4}
    a^a
    \cramped{\AssertCrampedStyle a^{\AssertCrampedStyle a}}
    a^a
    \AssertMathStyle{4}
  }
  a^{
    a^{
      \AssertMathStyle{6}
      a^a
      \cramped{\AssertCrampedStyle a^{\AssertCrampedStyle a}}
      a^a
      \AssertMathStyle{6}
    }
  }
  a^{\AssertMathStyle{4} a}
  \AssertMathStyle{2}
\end{math}
% \changes{v1.4}{2014/08/18}{Add test for \cs{smashoperator}}
% \pkg{mathtools}’ |\smashoperator| command requires |\MT_cramped_internal:Nn|
% to work in text as well as math mode (see
% \href{https://github.com/phst/lualatex-math/issues/11}{issue~11}).
\begin{math}
  \smashoperator{\sum_i}
\end{math}

% The \pkg{amsopn} package uses |\mathcode| when executing a user-defined
% operator command.  Test that this was patched out.
\setbox0=\vbox{%
% Check spacing is correct
% See the definitions in the preamble
  $\Operator$
  $\OperatorWithLimits$
  $\OperatorWithPunctuation$
  \mathcode`\-=45 \relax
  $\Operator$
  $\OperatorWithLimits$
  $\OperatorWithPunctuation$
}
\showbox0

\OMIT

\end{document}